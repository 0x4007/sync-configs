name: DEV Start Program

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'

jobs:
  run-start:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install JWT Dependencies
        run: npm install jsonwebtoken

      - name: Get Installation ID
        id: get_installation
        run: |
          # Create JWT token
          echo "${{ secrets.APP_PRIVATE_KEY }}" > private-key.pem
          JWT=$(node -e "
            const jwt = require('jsonwebtoken');
            const fs = require('fs');
            const privateKey = fs.readFileSync('private-key.pem', 'utf8');
            const now = Math.floor(Date.now() / 1000);
            const payload = {
              iat: now - 60,
              exp: now + 10 * 60,
              iss: '${{ secrets.APP_ID }}'
            };
            console.log(jwt.sign(payload, privateKey, { algorithm: 'RS256' }));
          ")

          # Debug JWT
          echo "JWT token generated successfully"

          # Get installation ID using JWT
          RESPONSE=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer $JWT" \
            "https://api.github.com/app/installations")

          echo "API Response: $RESPONSE"

          INSTALLATION_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.account.login=="ubiquity") | .id')

          if [ -z "$INSTALLATION_ID" ] || [ "$INSTALLATION_ID" = "null" ]; then
            echo "Error: Failed to get installation ID"
            echo "Full response:"
            echo "$RESPONSE" | jq '.'
            exit 1
          fi

          rm private-key.pem

          echo "Installation ID: $INSTALLATION_ID"
          echo "installation_id=$INSTALLATION_ID" >> $GITHUB_OUTPUT

      - name: Generate GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_retrieval_mode: id
          installation_retrieval_payload: ${{ steps.get_installation.outputs.installation_id }}

      - name: Configure Git
        run: |
          git config --global user.name "ubiquity-os[bot]"
          git config --global user.email "ubiquity-os[bot]@users.noreply.github.com"
          git config --global credential.helper store
          echo "https://ubiquity-os[bot]:${{ steps.generate_token.outputs.token }}@github.com" > ~/.git-credentials

      - name: Run start script
        run: bun run start "https://github.com/ubiquity/.ubiquity-os.git"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          EDITOR_INSTRUCTION: "insert all missing defaults"
          INTERACTIVE: "false"
          ACTOR: "ubiquity-os[bot]"
          EMAIL: "ubiquity-os[bot]@users.noreply.github.com"
          APP_ID: ${{ secrets.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          USE_MOCK_CLAUDE_RESPONSE: "true"
          AUTH_TOKEN: ${{ steps.generate_token.outputs.token }}
          APP_INSTALLATION_ID: ${{ steps.get_installation.outputs.installation_id }}
